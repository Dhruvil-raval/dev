
# .github/workflows/ci-cd.yml

name: Python CI/CD Pipeline

# Defines when the workflow runs
on:
  push:
    branches:
      - main
      - feature/**
  pull_request:
    branches:
      - main

# ----------------------------------------------------
# 1. JOBS DEFINITION (The equivalent of 'stages' and 'jobs' combined)
# ----------------------------------------------------
jobs:

  # --------------------------------------------------
  # Job 1: BUILD (Equivalent to the 'build' stage)
  # --------------------------------------------------
  build:
    name: Build Application
    runs-on: ubuntu-latest # The environment where the job runs
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Action to clone the repository

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use the specified Python version

      - name: Install Dependencies
        run: pip install -r requirements.txt # Assuming you have a requirements.txt

      - name: Create Artifact
        run: |
          mkdir build_output
          echo "Simulated artifact content" > build_output/my_app_artifact.txt

      - name: Upload Artifact
        # Saves the artifact to be used by later jobs
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: build_output/

  # --------------------------------------------------
  # Job 2: TEST (Equivalent to the 'test' stage)
  # Needs 'build' to run first
  # --------------------------------------------------
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build # DEPENDENCY: This ensures 'build' runs before 'test'

    # Download the artifact created by the 'build' job
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-package

      - name: Set up Python (for testing environment)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Tests
        # Use your Python scripting knowledge here
        run: |
          pip install -r requirements.txt
          python -m unittest discover tests # Run your Python tests

  # --------------------------------------------------
  # Job 3: DEPLOY (Equivalent to the 'deploy' stage)
  # Needs 'test' to run first
  # --------------------------------------------------
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: test # DEPENDENCY: This ensures 'test' runs before 'deploy-dev'

    # Conditions for when this job runs
    if: github.ref == 'refs/heads/main' # Only runs if pushing to the 'main' branch

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: deploy_target/ # Download it to a specific directory

      - name: Simulate Deployment
        run: |
          echo "--- Starting Deployment to DEV Environment ---"
          echo "Artifact contents downloaded to: deploy_target/"
          echo "Deploying version ${{ github.sha }} to server..."
          # Replace this with your actual deployment command (e.g., using SSH, kubectl, etc.)
          echo "Deployment script execution complete."
